name: Setup bun action
description: |
  Configures bun, cache, performs bun install

inputs:
  bun-run-install:
    description: Whether to run bun install
    required: false
    default: "true"
  bun-restore-cache:
    description: Whether to restore cache
    required: false
    default: "true"
  bun-install-cache-key:
    description: The cache key for the bun install cache
    required: false
    default: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}

runs:
  using: composite
  steps:
    - name: Restore bun install cache
      if: ${{ inputs.bun-restore-cache == 'true' }}
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
      with:
        # See here for caching with `bun` https://github.com/actions/cache/blob/main/examples.md#bun
        path: |
          path: ~/.bun/install/cache
        # Generate a new cache whenever packages or source files change.
        key: ${{ inputs.bun-install-cache-key }}
        # If source files changed but packages didn't, rebuild from a prior cache.
        restore-keys: |
          ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}-

    - name: Set up Bun
      uses: oven-sh/setup-bun@735343b667d3e6f658f44d0eca948eb6282f2b76 # v2.0.2
      with:
        bun-version-file: ".bun-version"

    - name: Run bun install
      if: ${{ inputs.bun-run-install == 'true' }}
      shell: bash
      run: bun install --frozen-lockfile
